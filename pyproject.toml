[project]
name = "interior-ai-service"
version = "0.1.0"
description = "Interior designer automation service using Google Gen AI"
authors = [
    {name = "Interior AI Team", email = "team@example.com"},
]
readme = "readme.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["fastapi", "google-cloud", "ai", "interior-design", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "google-genai>=0.3.0",
    "google-cloud-pubsub>=2.18.0",
    "google-cloud-logging>=3.8.0",
    "google-cloud-run>=0.10.0",
    "google-cloud-aiplatform>=1.38.0",
    "google-auth>=2.23.0",
    "python-multipart>=0.0.6",
    "email-validator>=2.1.0",
    "python-dotenv>=1.0.0",
    "python-jose[cryptography]>=3.3.0",
    "aiofiles>=23.2.1",
    "httpx>=0.25.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "types-python-jose>=3.3.4",
    "types-aiofiles>=23.2.0",
]

test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
]

[project.urls]
Homepage = "https://github.com/your-org/interior-ai-service"
Repository = "https://github.com/your-org/interior-ai-service"
Documentation = "https://github.com/your-org/interior-ai-service#readme"
Issues = "https://github.com/your-org/interior-ai-service/issues"
Changelog = "https://github.com/your-org/interior-ai-service/blob/main/CHANGELOG.md"

[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "types-python-jose>=3.3.4",
    "types-aiofiles>=23.2.0",
]

[tool.ruff]
target-version = "py311"
line-length = 100
extend-exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    ".venv",
    "venv",
    ".uv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert detected
    "S104",  # possible binding to all interfaces
    "S105",  # possible hardcoded password
    "S106",  # possible hardcoded password
    "S107",  # possible hardcoded password
    "T201",  # print found
    "T203",  # pprint found
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "S105", "S106", "S107"]
"*/conftest.py" = ["S101"]

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-single-line = true
single-line-exclusions = ["typing"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 80

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "tests/*",
    "*/conftest.py",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "google.cloud.*",
    "google.genai.*",
    "uvicorn.*",
]
ignore_missing_imports = true

[tool.hatch.version]
path = "app/__init__.py"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.gitignore",
    "/.pre-commit-config.yaml",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.hatch.envs.default]
dependencies = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest"
test-cov = "pytest --cov=app"
lint = "ruff check ."
format = "ruff format ."
type-check = "mypy app"
all = ["format", "lint", "type-check", "test"]

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",
]

[tool.hatch.envs.test.scripts]
run = "pytest"
run-cov = "pytest --cov=app"

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-section-index>=0.3.6",
    "mkdocstrings[python]>=0.24.0",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve --dev-addr 0.0.0.0:8000"

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"] 