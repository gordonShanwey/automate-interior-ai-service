# Simple Cloud Build configuration for Interior AI Service
# Runs on push to main branch - builds, tests, and deploys

steps:
  # Step 1: Run tests and code quality checks
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üß™ Running tests and code quality checks..."
        
        # Create a test container with our code
        docker create --name test-container python:3.11-slim
        docker cp . test-container:/app
        docker start test-container
        
        # Install uv and dependencies
        docker exec test-container bash -c "
          pip install --no-cache-dir uv &&
          cd /app &&
          uv sync --frozen --no-dev &&
          uv run pip install pytest pytest-cov ruff bandit
        "
        
        # Run code quality checks
        docker exec test-container bash -c "
          cd /app &&
          echo 'üîç Running ruff linting...' &&
          uv run ruff check . &&
          echo '‚ú® Running ruff formatting...' &&
          uv run ruff format --check . &&
          echo 'üîí Running security scanning...' &&
          uv run bandit -r app/ -f json -o bandit-report.json || true
        "
        
        # Run unit tests
        docker exec test-container bash -c "
          cd /app &&
          echo 'üß™ Running unit tests...' &&
          uv run pytest tests/unit/ -v --cov=app --cov-report=term
        "
        
        # Clean up test container
        docker stop test-container
        docker rm test-container
        
        echo "‚úÖ Tests completed"

  # Step 2: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/interior-ai-service:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/interior-ai-service:latest'
      - '-f'
      - 'Dockerfile'
      - '.'
    id: 'build-image'

  # Step 3: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/interior-ai-service:$COMMIT_SHA'
      - 'gcr.io/$PROJECT_ID/interior-ai-service:latest'
    id: 'push-image'
    waitFor: ['build-image']

  # Step 4: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'interior-ai-service'
      - '--image'
      - 'gcr.io/$PROJECT_ID/interior-ai-service:$COMMIT_SHA'
      - '--region'
      - 'europe-north1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--memory'
      - '2Gi'
      - '--cpu'
      - '2'
      - '--max-instances'
      - '20'
      - '--min-instances'
      - '1'
      - '--set-env-vars'
      - 'ENVIRONMENT=production,GOOGLE_CLOUD_PROJECT=$PROJECT_ID,VERTEX_AI_LOCATION=europe-north1,PUBSUB_TOPIC=form-submissions-topic,DESIGNER_EMAIL=ezygas@gmail.com'
      - '--set-secrets'
      - 'GOOGLE_APPLICATION_CREDENTIALS=interior-ai-service-credentials:latest'
    id: 'deploy-cloud-run'
    waitFor: ['push-image']

  # Step 5: Run health checks
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üè• Running health checks..."
        
        # Wait for deployment to be ready
        sleep 30
        
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe interior-ai-service --region=europe-north1 --format='value(status.url)')
        
        # Run health checks
        echo "Checking service at: $SERVICE_URL"
        
        # Basic health check
        curl -f "$SERVICE_URL/health/" || exit 1
        
        # Readiness check
        curl -f "$SERVICE_URL/health/readiness" || exit 1
        
        echo "‚úÖ Health checks passed"
        echo "üöÄ Deployment successful! Service URL: $SERVICE_URL"
    waitFor: ['deploy-cloud-run']

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Build timeout
timeout: '1200s'

# Available images
images:
  - 'gcr.io/$PROJECT_ID/interior-ai-service:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/interior-ai-service:latest'

# Artifacts to store
artifacts:
  objects:
    location: 'gs://$PROJECT_ID-cloud-build-artifacts/'
    paths:
      - 'bandit-report.json'
      - 'htmlcov/'
      - 'coverage.xml' 