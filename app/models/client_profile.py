"""Client profile models for the Interior AI Service."""

from datetime import datetime
from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field


class DesignRecommendation(BaseModel):
    """Individual design recommendation from AI analysis."""
    
    category: str = Field(..., description="Recommendation category (e.g., 'Color Scheme', 'Furniture', 'Layout')")
    title: str = Field(..., description="Short title for the recommendation")
    description: str = Field(..., description="Detailed description of the recommendation")
    reasoning: str = Field(..., description="AI reasoning behind this recommendation")
    priority: str = Field(default="medium", description="Priority level (low, medium, high)")
    estimated_cost: Optional[str] = Field(None, description="Estimated cost range for this recommendation")
    timeline: Optional[str] = Field(None, description="Estimated timeline for implementation")
    
    class Config:
        json_schema_extra = {
            "example": {
                "category": "Color Scheme",
                "title": "Warm Neutral Palette",
                "description": "Consider a warm neutral color palette with soft beiges and warm grays to create a cozy, inviting atmosphere.",
                "reasoning": "Based on the client's preference for modern comfort and the room's natural lighting, warm neutrals will provide flexibility and timeless appeal.",
                "priority": "high",
                "estimated_cost": "$500-1500",
                "timeline": "1-2 weeks"
            }
        }


class ClientProfile(BaseModel):
    """Complete client profile generated by AI analysis."""
    
    # Client identification
    client_name: str = Field(..., description="Client name")
    email: str = Field(..., description="Client email address")
    phone: Optional[str] = Field(None, description="Client phone number")
    
    # Project overview
    project_type: str = Field(..., description="Type of interior design project")
    project_summary: str = Field(..., description="AI-generated project summary")
    
    # Property details
    property_address: Optional[str] = Field(None, description="Property address")
    room_count: Optional[str] = Field(None, description="Number of rooms")
    square_feet: Optional[str] = Field(None, description="Property size in square feet")
    
    # Client preferences and constraints
    budget_range: Optional[str] = Field(None, description="Client's budget range")
    timeline: Optional[str] = Field(None, description="Project timeline")
    style_preference: Optional[str] = Field(None, description="Design style preference")
    urgency: Optional[str] = Field(None, description="Project urgency level")
    
    # AI analysis results
    design_style_analysis: str = Field(..., description="AI analysis of client's style preferences")
    space_analysis: str = Field(..., description="AI analysis of the space and its potential")
    budget_analysis: str = Field(..., description="AI analysis of budget considerations")
    timeline_analysis: str = Field(..., description="AI analysis of project timeline")
    
    # Recommendations
    recommendations: List[DesignRecommendation] = Field(..., description="List of design recommendations")
    overall_recommendation: str = Field(..., description="Overall design recommendation summary")
    
    # Next steps
    next_steps: List[str] = Field(..., description="Recommended next steps for the project")
    estimated_project_duration: Optional[str] = Field(None, description="Estimated total project duration")
    estimated_total_cost: Optional[str] = Field(None, description="Estimated total project cost")
    
    # Metadata
    generated_at: datetime = Field(default_factory=datetime.utcnow, description="When the profile was generated")
    ai_model_used: str = Field(..., description="AI model used for generation")
    confidence_score: Optional[float] = Field(None, description="AI confidence score (0-1)")
    processing_time_seconds: Optional[float] = Field(None, description="Time taken to generate profile")
    
    # Raw data reference
    original_data_summary: Dict[str, Any] = Field(..., description="Summary of original client data")
    
    class Config:
        json_schema_extra = {
            "example": {
                "client_name": "Sarah Johnson",
                "email": "sarah.johnson@email.com",
                "project_type": "Living Room Redesign",
                "project_summary": "Modern, comfortable living room redesign with focus on natural light and family functionality.",
                "design_style_analysis": "Client shows preference for modern comfort with natural elements...",
                "space_analysis": "The 400 sq ft living room has excellent natural lighting...",
                "recommendations": [],
                "overall_recommendation": "Focus on creating a modern, comfortable space...",
                "next_steps": ["Schedule initial consultation", "Create detailed floor plan", "Select color palette"],
                "ai_model_used": "gemini-1.5-pro",
                "original_data_summary": {"field_count": 8, "quality_score": 0.85}
            }
        }
    
    def to_email_content(self) -> str:
        """Convert profile to formatted email content."""
        content_parts = [
            f"# Client Profile: {self.client_name}",
            f"**Generated:** {self.generated_at.strftime('%Y-%m-%d %H:%M UTC')}",
            "",
            f"## Project Overview",
            f"**Type:** {self.project_type}",
            f"**Summary:** {self.project_summary}",
            ""
        ]
        
        # Add property details if available
        if self.property_address or self.room_count or self.square_feet:
            content_parts.append("## Property Details")
            if self.property_address:
                content_parts.append(f"**Address:** {self.property_address}")
            if self.room_count:
                content_parts.append(f"**Rooms:** {self.room_count}")
            if self.square_feet:
                content_parts.append(f"**Size:** {self.square_feet} sq ft")
            content_parts.append("")
        
        # Add client preferences
        content_parts.append("## Client Preferences")
        if self.budget_range:
            content_parts.append(f"**Budget:** {self.budget_range}")
        if self.timeline:
            content_parts.append(f"**Timeline:** {self.timeline}")
        if self.style_preference:
            content_parts.append(f"**Style:** {self.style_preference}")
        if self.urgency:
            content_parts.append(f"**Urgency:** {self.urgency}")
        content_parts.append("")
        
        # Add AI analysis
        content_parts.extend([
            "## AI Analysis",
            f"**Design Style:** {self.design_style_analysis}",
            "",
            f"**Space Analysis:** {self.space_analysis}",
            "",
            f"**Budget Considerations:** {self.budget_analysis}",
            "",
            f"**Timeline Analysis:** {self.timeline_analysis}",
            ""
        ])
        
        # Add recommendations
        content_parts.append("## Design Recommendations")
        for i, rec in enumerate(self.recommendations, 1):
            content_parts.extend([
                f"### {i}. {rec.title}",
                f"**Category:** {rec.category}",
                f"**Priority:** {rec.priority.title()}",
                f"**Description:** {rec.description}",
                f"**Reasoning:** {rec.reasoning}",
            ])
            if rec.estimated_cost:
                content_parts.append(f"**Estimated Cost:** {rec.estimated_cost}")
            if rec.timeline:
                content_parts.append(f"**Timeline:** {rec.timeline}")
            content_parts.append("")
        
        # Add overall recommendation
        content_parts.extend([
            "## Overall Recommendation",
            self.overall_recommendation,
            ""
        ])
        
        # Add next steps
        content_parts.append("## Next Steps")
        for i, step in enumerate(self.next_steps, 1):
            content_parts.append(f"{i}. {step}")
        content_parts.append("")
        
        # Add estimates
        if self.estimated_project_duration or self.estimated_total_cost:
            content_parts.append("## Project Estimates")
            if self.estimated_project_duration:
                content_parts.append(f"**Duration:** {self.estimated_project_duration}")
            if self.estimated_total_cost:
                content_parts.append(f"**Total Cost:** {self.estimated_total_cost}")
            content_parts.append("")
        
        return "\n".join(content_parts)
    
    def get_summary(self) -> str:
        """Get a brief summary of the profile."""
        return f"Client: {self.client_name} | Project: {self.project_type} | Recommendations: {len(self.recommendations)}"
